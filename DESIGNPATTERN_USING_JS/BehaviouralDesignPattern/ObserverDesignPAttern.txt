OBSERVER_DESIGN_PATTERN


Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified,
its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.

----------------------------

Observer pattern uses three actor classes. Subject, Observer and Client. 
Subject is an object having methods to attach and detach observers to a client object.
We have created an abstract class Observer and a concrete class Subject that is extending class Observer.
ObserverPatternDemo, our demo class, will use Subject and concrete class object to show observer pattern in action.

Observer pattern lets you define a subscription mechanism to notify multiple objects about any event that happen to the object they are observing.


Problem :-
You have two types of Object:
aCustomer and a Store
.The customer is very interested in particular brand of product
which should become available in the store very soon.

The customer could  visit the store every day and check product availability
most trips and pointless.

.The store - tons of emails (which might be considered spam to all customer each time a new productbecome 
available.)
.Conflict -Custoimer wastes time checking  or stores waste resource notify to wrong customer.

Solution

Publisher object has some interesting state-Subject.
Subscriber objects want to track changes to the publisher's state.
Subscriber objects can subscribe to the publisher
.list of references to subscriber objects
.public method add , remove subscribers them from the list.
whenever an event occurs publishers notifies its subscribers.


Publisher
-subscribers:Subscriber[]
-mainstate
------------
+subsc